/**
 * Created by sheggi on 25.12.15.
 */
"use strict";
import * as fs from "fs";
import * as path from "path";
import {FSStorage} from "./fsstorage";
import {Settings} from "./settings";
import {OfficeProject} from "./project";
import {ModelList} from "./modellist";

// helper function
var endsWith = function (base, suffix) {
    return base.indexOf(suffix, base.length - suffix.length) !== -1;
};

export module Utils {
// http://stackoverflow.com/questions/5827612/node-js-fs-readdir-recursive-directory-search
    export function listProjectPaths(dir:string, done:Function):void {
        var results = [];
        fs.readdir(dir, function (err, list) {
            if (err) return done(err);
            var pending = list.length;
            if (!pending) return done(null, results);
            list.forEach(function (file) {
                file = path.resolve(dir, file);
                fs.stat(file, function (err, stat) {
                    if (stat && stat.isDirectory()) {

                        if (file.indexOf(path.sep + ".") <= 0 && file.indexOf("Projekte") + 8 >= file.lastIndexOf(path.sep) && !endsWith(file, "Projekte")) { // check if path starts with '.'
                            if (results.indexOf(file) < 0)
                                results.push(file);
                        }

                        listProjectPaths(file, function (err, res) {
                            results = results.concat(res);
                            if (!--pending) done(null, results);
                        });
                    } else {
                        var fileName = path.basename(file);
                        if (fileName == Settings.Instace.storagefile) {
                            var directory = path.dirname(file);
                            if (results.indexOf(directory) < 0) {
                                results.push(directory);
                            }
                        }
                        if (!--pending) done(null, results);
                    }
                });
            });
        });
    } // end of function

    export function walk(dir:string, done:Function, condition:Function):void {
        var results = [];
        fs.readdir(dir, function (err, list) {
            if (err) return done(err);
            var pending = list.length;
            if (!pending) return done(null, results);
            list.forEach(function (file) {
                var fileName = file;
                file = path.resolve(dir, file);
                fs.stat(file, function (err, stat) {

                    if (condition(stat, file)) {
                        if (results.indexOf(file) < 0)
                            results.push(file);
                    }

                    if (stat && stat.isDirectory()) {
                        if (fileName[0] != ".") { // ignore .xxxxx folders
                            walk(file, function (err, res) {
                                results = results.concat(res);
                                if (!--pending) done(null, results);
                            }, condition);
                        } else {
                            if (!--pending) done(null, results);
                        }
                    } else {
                        if (!--pending) done(null, results);
                    }
                });
            });
        });
    }// end of function


    export function searchProjectPaths(root_path, project_file, callback):void {
        Utils.walk(root_path, callback, function (state, file) {
            if (!state.isDirectory() &&
                endsWith(file, project_file)) {
                return true;
            }

            if (state && !state.isDirectory()) {
                return false;
            }
            if (file.toLowerCase().lastIndexOf("projekte") > file.lastIndexOf(path.sep) || file.toLowerCase().lastIndexOf("projects") > file.lastIndexOf(path.sep)) {
                return false;
            }
            if (file.toLowerCase().lastIndexOf("projekt") > file.lastIndexOf(path.sep) || file.toLowerCase().lastIndexOf("project") > file.lastIndexOf(path.sep)) {
                return true;
            }
            return false;
        });
    } // end of function


    export function createProjectByPaths(paths:string[], callback:(project:ModelList)=>void):void {
        var settings = Settings.Instace;
        var project_count = 0;
        if (settings.debug())
            console.log("###CREATED PROJECTS");
        var projects = new ModelList();
        paths.forEach(dir => {

            if (settings.debug())
                console.log("* LOAD> ", dir);

            Utils.loadProject(dir, (err, project) => {
                if (err) {

                    var proj = new OfficeProject();
                    proj.name = dir.slice(dir.lastIndexOf(path.sep) + 1);
                    proj.description = "generated by path";
                    proj.mainDir = path.relative(settings.rootdir, dir);
                    console.log("*  NEW> ", proj.mainDir);


                    projects.add(proj);
                } else {
                    projects.add(project);
                }

                project_count++;
                if (project_count >= paths.length) {
                    callback(projects);
                }
            });
        });
    } // end of function



    export function saveProject(project:OfficeProject, callback:(err)=>void):void {
        var settings = Settings.Instace;
        var file = path.resolve(settings.rootdir, project.mainDir, settings.storagefile);
        FSStorage.save(file, project.stringify(), err => {
            callback(err);
        });
    } // end of function

    export function loadProject(dir:string, callback:(Error, OfficeProject)=>void):void {
        var settings = Settings.Instace;
        var storagefile = path.resolve(dir, settings.storagefile);
        FSStorage.load(storagefile, (err, obj) => {
            if (err) {
                callback(err, null);
            } else {
                var proj = new OfficeProject();
                proj.parse(obj);
                callback(null, proj);
            }
        });
    } // end of function

    export function loadSettings(file:string, callback:(Error, Settings)=>void):void {
        var settings = Settings.Instace;
        FSStorage.load(file, (err, obj) => {
            if (err) {
                callback(err, null);
            } else {
                settings.parse(obj);
                callback(err, settings);
            }
        });
    } // end of function

    export function saveSettings(file:string, callback:(Error)=>void):void {
        var settings = Settings.Instace;
        FSStorage.save(file, settings.stringify(), callback);
    }
}// end of module